<?php
/**
 * Plugin Name:       Custom Logout
 * Description:       Provides a shortcode [custom_logout] to output a logout link or form with nonce and redirect support.
 * Version:           1.0.0
 * Author:            yehoon17
 * License:           GPLv2
 * License URI:       https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * Text Domain:       custom-logout
 * Domain Path:       /languages
 *
 * @package Custom_Logout
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

if ( ! class_exists( 'CL_Custom_Logout' ) ) :

/**
 * Main plugin class for Custom Logout.
 */
final class CL_Custom_Logout {

	/**
	 * Singleton instance.
	 *
	 * @var CL_Custom_Logout|null
	 */
	private static $instance = null;

	/**
	 * Get singleton instance.
	 *
	 * @return CL_Custom_Logout
	 */
	public static function get_instance() {
		if ( null === self::$instance ) {
			self::$instance = new CL_Custom_Logout();
		}
		return self::$instance;
	}

	/**
	 * Constructor.
	 */
	private function __construct() {
		add_action( 'init', array( $this, 'load_textdomain' ) );
		add_shortcode( 'custom_logout', array( $this, 'render_shortcode' ) );
	}

	/**
	 * Load plugin text domain for translations.
	 */
	public function load_textdomain() {
		load_plugin_textdomain(
			'custom-logout',
			false,
			dirname( plugin_basename( __FILE__ ) ) . '/languages'
		);
	}

	/**
	 * Shortcode callback for [custom_logout].
	 *
	 * Attributes:
	 * - class    : (string) CSS classes to add to the link/button
	 * - label    : (string) Link/button text. Default: "Logout"
	 * - redirect : (string) URL to redirect to after logout. Default: homepage
	 * - type     : (string) "link" (default) or "form"
	 *
	 * @param array $atts Shortcode attributes.
	 * @return string HTML output.
	 */
	public function render_shortcode( $atts ) {
		$defaults = array(
			'class'    => '',
			'label'    => __( 'Logout', 'custom-logout' ),
			'redirect' => home_url( '/' ),
			'type'     => 'link',
		);

		$atts = shortcode_atts( $defaults, $atts, 'custom_logout' );

		// Normalize + sanitize.
		$type     = $this->sanitize_type( $atts['type'] );
		$classes  = $this->sanitize_classes( $atts['class'] );
		$label    = is_string( $atts['label'] ) ? $atts['label'] : $defaults['label'];

		// Validate redirect to prevent open redirects; fall back to homepage.
		$redirect = wp_validate_redirect( $atts['redirect'], home_url( '/' ) );

		// If user is not logged in, return filterable "logged out" output (default empty).
		if ( ! is_user_logged_in() ) {
			$logged_out_html = apply_filters(
				'custom_logout_logged_out_output',
				'',
				array(
					'atts'     => $atts,
					'redirect' => $redirect,
				)
			);
			return is_string( $logged_out_html ) ? $logged_out_html : '';
		}

		// Build outputs.
		$logout_url = wp_logout_url( $redirect ); // Includes secure nonce & redirect.

		if ( 'form' === $type ) {
			// POST form to wp-login.php with the correct action and nonce.
			$action_url = wp_login_url(); // The receiver for logout action.
			$nonce      = wp_create_nonce( 'log-out' );

			$html = sprintf(
				'<form class="custom-logout-form" action="%1$s" method="post">
					<input type="hidden" name="action" value="logout" />
					<input type="hidden" name="_wpnonce" value="%2$s" />
					<input type="hidden" name="redirect_to" value="%3$s" />
					<button type="submit" class="%4$s" aria-label="%5$s">%6$s</button>
				</form>',
				esc_url( $action_url ),
				esc_attr( $nonce ),
				esc_attr( $redirect ),
				esc_attr( $classes ),
				esc_attr( $this->aria_label_from_text( $label ) ),
				esc_html( $label )
			);
		} else {
			// Default: link.
			$base_class = 'custom-logout-link';
			$final_class = trim( $base_class . ( $classes ? ' ' . $classes : '' ) );

			$html = sprintf(
				'<a class="%1$s" href="%2$s" rel="nofollow" aria-label="%3$s">%4$s</a>',
				esc_attr( $final_class ),
				esc_url( $logout_url ),
				esc_attr( $this->aria_label_from_text( $label ) ),
				esc_html( $label )
			);
		}

		/**
		 * Filter the final HTML output of the shortcode.
		 *
		 * @param string $html  The HTML generated by the shortcode.
		 * @param array  $args  Context arguments.
		 */
		$html = apply_filters(
			'custom_logout_output',
			$html,
			array(
				'atts'       => $atts,
				'type'       => $type,
				'class'      => $classes,
				'label'      => $label,
				'redirect'   => $redirect,
				'logout_url' => $logout_url,
				// Provided for convenience in case developers prefer POST target:
				'action_url' => wp_login_url(),
			)
		);

		return is_string( $html ) ? $html : '';
	}

	/**
	 * Sanitize the "type" attribute.
	 *
	 * @param string $type Type attribute.
	 * @return string
	 */
	private function sanitize_type( $type ) {
		$type = strtolower( (string) $type );
		return in_array( $type, array( 'link', 'form' ), true ) ? $type : 'link';
	}

	/**
	 * Sanitize a list of CSS classes (space-separated).
	 *
	 * @param string $classes Raw classes string.
	 * @return string Sanitized classes.
	 */
	private function sanitize_classes( $classes ) {
		if ( ! is_string( $classes ) || '' === trim( $classes ) ) {
			return '';
		}
		$parts   = preg_split( '/\s+/', $classes );
		$cleaned = array();

		foreach ( $parts as $part ) {
			$san = sanitize_html_class( $part );
			if ( '' !== $san ) {
				$cleaned[] = $san;
			}
		}

		return implode( ' ', array_unique( $cleaned ) );
	}

	/**
	 * Build an ARIA label from the provided visible text.
	 *
	 * @param string $text Visible text.
	 * @return string
	 */
	private function aria_label_from_text( $text ) {
		$text = (string) $text;
		$text = trim( wp_strip_all_tags( $text ) );
		// Fallback to a generic label if empty after stripping (unlikely).
		if ( '' === $text ) {
			$text = __( 'Logout', 'custom-logout' );
		}
		return $text;
	}
}

// Bootstrap.
CL_Custom_Logout::get_instance();

endif;
